<?xml version="1.0" encoding="UTF-8"?>
<!-- I_Reactor.xml -->
<implementation>
    <functions>
        -- --------------------------------------------------------------------
        -- Reactor
        -- Copyright 2018 Patrick H. Rigney, All Rights Reserved.
        -- https://www.toggledbits.com/reactor
        -- --------------------------------------------------------------------
        function startupReactor(devNum)
            luup.log("Reactor STARTUP!")
            Reactor = require("L_Reactor")
            reactorTick = Reactor.tick
            reactorWatch = Reactor.watch
            reactorRequestHandler = Reactor.request
            luup.register_handler("reactorRequestHandler", "Reactor")
            return Reactor.startPlugin(devNum)
        end
    </functions>
    <startup>startupReactor</startup>
    <actionList>
        <action>
            <serviceId>urn:toggledbits-com:serviceId:ReactorSensor</serviceId>
            <name>SetEnabled</name>
            <run>
                Reactor.actionSetEnabled( lul_settings.newEnabledValue, lul_device )
                return true
            </run>
        </action>
        <action>
            <serviceId>urn:toggledbits-com:serviceId:ReactorSensor</serviceId>
            <name>Reset</name>
            <run>
                Reactor.actionReset( lul_device )
                return true
            </run>
        </action>
        <action>
            <serviceId>urn:toggledbits-com:serviceId:ReactorSensor</serviceId>
            <name>Trip</name>
            <run>
                Reactor.actionTrip( lul_device )
                return true
            </run>
        </action>
        <action>
            <serviceId>urn:toggledbits-com:serviceId:ReactorSensor</serviceId>
            <name>Restart</name>
            <job>
                Reactor.actionRestart( lul_device )
                return 4,0
            </job>
        </action>
        <action>
            <serviceId>urn:toggledbits-com:serviceId:ReactorSensor</serviceId>
            <name>ResetRuntime</name>
            <run>
                luup.variable_set( "urn:toggledbits-com:serviceId:ReactorSensor", "TripCount", "0", lul_device )
                luup.variable_set( "urn:toggledbits-com:serviceId:ReactorSensor", "Runtime", "0", lul_device )
                luup.variable_set( "urn:toggledbits-com:serviceId:ReactorSensor", "RuntimeSince", os.time(), lul_device )
                return true
            </run>
        </action>
        <action>
            <serviceId>urn:micasaverde-com:serviceId:SecuritySensor1</serviceId>
            <name>SetArmed</name>
            <run>
                Reactor.actionSetArmed( lul_settings.newArmedValue, lul_device )
                return true
            </run>
        </action>
        <action>
            <serviceId>urn:toggledbits-com:serviceId:Reactor</serviceId>
            <name>AddSensor</name>
            <job>
                Reactor.actionAddSensor( lul_device )
                return 4,0
            </job>
        </action>
        <action>
            <serviceId>urn:toggledbits-com:serviceId:Reactor</serviceId>
            <name>RunScene</name>
            <job>
                -- See https://www.toggledbits.com/reactor for explanation of Options
                Reactor.actionRunScene( lul_settings.SceneNum, lul_settings.Options or {}, lul_device )
                return 4,0
            </job>
        </action>
        <action>
            <serviceId>urn:toggledbits-com:serviceId:Reactor</serviceId>
            <name>StopScene</name>
            <run>
                -- contextDevice is normally the device that originally called for the scene run
                -- in the Options table. If SceneNum is nil or 0, all scenes for the context device
                -- will be stopped.
                Reactor.actionStopScene( lul_settings.contextDevice, lul_settings.SceneNum, lul_device )
            </run>
        </action>
        <action>
            <serviceId>urn:toggledbits-com:serviceId:Reactor</serviceId>
            <name>MasterClear</name>
            <job>
                Reactor.actionMasterClear( lul_device )
                return 4,0
            </job>
        </action>
        <action>
            <serviceId>urn:toggledbits-com:serviceId:Reactor</serviceId>
            <name>GetPluginVersion</name>
            <run>
                -- Ugly hack. Luup seems to only be able to return values from related state variables (see S_), so use a temp
                -- one to store the result we want to pass back. Blech. C'mon guys. Amateur hour. Add an extra return argument
                -- for a table of return values or something, please?
                local vs, vn = Reactor.getPluginVersion()
                luup.variable_set("urn:toggledbits-com:serviceId:Reactor", "TempStorage", vs, lul_device)
                return true
            </run>
        </action>
        <action>
            <serviceId>urn:toggledbits-com:serviceId:Reactor</serviceId>
            <name>SetDebug</name>
            <run>
                local newDebugValue = tonumber(lul_settings.debug or "0") or 0
                Reactor.actionSetDebug( debug ~= 0, lul_device )
                return true
            </run>
        </action>
    </actionList>
</implementation>
